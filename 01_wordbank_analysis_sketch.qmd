---
title: "Initial Analysis of Wordbank Data"
author: "George, Alvin, Julien, ..."
format: html
editor: source
---

# Setup
```{r}
knitr::opts_chunk$set(message = FALSE)
```

```{r}
library(tidyverse)
library(here)
library(glue)
library(wordbankr)
library(gamlss)
library(lmtest)
library(qqplotr)

theme_set(theme_classic())
walk(list.files("scripts", full.names = TRUE), source)
```

# Get data 
Get all datasets explicitly labelled "bilingual"
```{r}
bilingual_datasets <- get_datasets() |> 
  filter(str_detect(dataset_origin_name, "Bilingual"))
```

Wrangle exposure data
```{r}
bilingual_data <- get_administration_data(include_demographic_info = TRUE,
                                          include_language_exposure = TRUE) |> 
  filter(dataset_origin_name %in% bilingual_datasets$dataset_origin_name) |>
  unnest(language_exposures, names_sep = "_") |>
  filter(!is.na(language_exposures_language),
         !is.na(language_exposures_exposure_proportion)) |>
  rename(exposure_language = language_exposures_language,
         exposure_proportion = language_exposures_exposure_proportion,
         age_first_exposed = language_exposures_age_of_first_exposure) |>
  select(-c(age_first_exposed, is_norming, date_of_test)) |> 
  filter(str_detect(language, glue("^{exposure_language}")))

# The Armon-Lotem data only have 4 values for exposure_proportion
bilingual_data_clean <- bilingual_data |> 
  filter(dataset_origin_name != "Armon-Lotem_Hebrew_English_Bilingual")
```

# Preprocess data
```{r}
all_instruments <- bilingual_data_clean |> 
  distinct(language, form)
```

Find number of items on each form
```{r}
items <- map2(all_instruments$language, all_instruments$form, get_item_data) |> 
  list_rbind() |> 
  group_by(language, form) |> 
  filter(item_kind == "word") |> 
  summarise(n = n(), .groups = "drop")

bilingual_data_prop <- bilingual_data_clean |> 
  left_join(items, by = join_by(language, form)) |> 
  mutate(prop_prod = production / n,
         prop_prod = case_when(
           prop_prod == 0 ~ .001,
           prop_prod == 1 ~ .999,
           .default = prop_prod
         ),
         child_id = as_factor(child_id))
```

Filter down to just Eng (Am) data for now
```{r}
bilingual_data_prop_en <- bilingual_data_prop |> 
  filter(language == "English (American)")
```

# Run models
## Nonlinear model
Fit GAMLSS model with monotonic spline for exposure
```{r}
data_mod <- bilingual_data_prop_en |> 
                          select(prop_prod, age, exposure_proportion, child_id)

gam_nonlinear <- gamlss(prop_prod ~ pbm(age, lambda = 10000) * 
                          pbm(exposure_proportion, lambda = 10000) +
                          re(random = ~ 1 | child_id, level = 0),
                        sigma.formula = ~ pbm(age, lambda = 10000) * 
                          pbm(exposure_proportion, lambda = 10000),
                        data = data_mod,
                        family = BE,
                        control = gamlss.control(n.cyc = 100))

# model checking:
# look at outliers in q-q plot
# some structure in fitted value resid plot?
# 
# can try fitting for each lang separately and check the curve shape (robustness checking)
```

Plot model predictions 
```{r}
plot_preds(gam_nonlinear)
```

```{r}
plot_preds(gam_nonlinear, x = "age")
```

### Diagnostics
```{r}
plot(gam_nonlinear)
```

The default plots are not great; we manually plot some diagnostics of interest using ggplot

Quantile residuals against fitted values. Some structure; this is corroborated in the wormplot.
```{r}
plot_resids(gam_nonlinear)
```

Q-Q plot
```{r}
plot_qq(gam_nonlinear)
```

Worm plot (detrended qq-plot)
```{r}
plot_wp(gam_nonlinear)
```

Trying to diagnose structure in residuals
```{r}
gam_nl_moddata <- plot_resids(gam_nonlinear, type = "o")
ggplot(gam_nl_moddata,
       aes(x = age, y = resid)) +
  geom_hline(yintercept = 0, lty = "dashed") +
  geom_point(alpha = .5) +
  geom_smooth()
```

```{r}
ggplot(gam_nl_moddata,
       aes(x = exposure_proportion, y = resid)) +
  geom_hline(yintercept = 0, lty = "dashed") +
  geom_point(alpha = .5) +
  geom_smooth()
```

### Partial effect plot
```{r}
plot_partial(gam_nonlinear)
plot_partial(gam_nonlinear, x = "age")
```

## Fiddling with lambda
### Fitting lambda
```{r}
gam_nonlinear_lmb <- gamlss(prop_prod ~ pbm(age, 
                                            control = pbm.control(method = "GCV")) * 
                              pbm(exposure_proportion, 
                                  control = pbm.control(method = "GCV")) +
                              re(random = ~ 1 | child_id, level = 0),
                            sigma.formula = ~ pbm(age, 
                                                  control = pbm.control(method = "GCV")) *  
                              pbm(exposure_proportion, 
                                  control = pbm.control(method = "GCV")),
                            data = data_mod,
                            family = BE,
                            control = gamlss.control(n.cyc = 100))
```

Extract lambda values
```{r}
gam_nl_lmb <- tibble(
  param = rep(c("mu", "sigma"), each = 2),
  term = rep(c(1, 2), 2)
) |> 
  mutate(lambda = map2_dbl(param, term, \(p, t) getSmo(gam_nonlinear_lmb, p, which = t)$lambda),
         term = factor(term, levels = c(1, 2), labels = c("age", "exposure_proportion")))
```

```{r}
lrtest(gam_nonlinear, gam_nonlinear_lmb)
```

### Lower lambda model
```{r}
gam_nonlinear_low <- gamlss(prop_prod ~ pbm(age, lambda = 10) * 
                              pbm(exposure_proportion, lambda = 10) +
                              re(random = ~ 1 | child_id, level = 0),
                            sigma.formula = ~ pbm(age, lambda = 10) *  
                              pbm(exposure_proportion, lambda = 10),
                            data = data_mod,
                            family = BE,
                            control = gamlss.control(n.cyc = 250))
```

### Even lower lambda model
```{r}
gam_nonlinear_lower <- gamlss(prop_prod ~ pbm(age, lambda = 1) * 
                              pbm(exposure_proportion, lambda = 1) +
                              re(random = ~ 1 | child_id, level = 0),
                            sigma.formula = ~ pbm(age, lambda = 1) *  
                              pbm(exposure_proportion, lambda = 1),
                            data = data_mod,
                            family = BE,
                            control = gamlss.control(n.cyc = 250))
```

```{r}
plot_partial(gam_nonlinear_lower)
```

## ZOIB model?
```{r}
data_zoib <- data_mod |> 
  mutate(prop_prod = case_when(
    prop_prod == .001 ~ 0,
    prop_prod == .999 ~ 1,
    .default = prop_prod
  ))
gam_nonlinear_zoib <- gamlss(prop_prod ~ pbm(age, lambda = 10000) * 
                               pbm(exposure_proportion, lambda = 10000) +
                               re(random = ~ 1 | child_id, level = 0),
                             sigma.formula = ~ pbm(age, lambda = 10000) * 
                               pbm(exposure_proportion, lambda = 10000),
                             data = data_zoib,
                             family = BEINF,
                             control = gamlss.control(n.cyc = 100))
```

```{r}
plot_preds(gam_nonlinear_zoib)
```

```{r}
plot_preds(gam_nonlinear_zoib, x = "age")
```

```{r}
plot_partial(gam_nonlinear_zoib)
```


## Linear model
Compare with linear exposure term
```{r}
gam_linear <- gamlss(prop_prod ~ pbm(age, lambda = 10000) * 
                       exposure_proportion +
                       re(random = ~ 1 | child_id, level = 0),
                     sigma.formula = ~ pbm(age, lambda = 10000) * 
                       exposure_proportion,
                     data = bilingual_data_prop_en |> 
                       select(prop_prod, age, exposure_proportion, child_id),
                     family = BE,
                     control = gamlss.control(n.cyc = 100))

# try nonlinear in mu, linear in sigma
# or nonlinear in mu, NOT in sigma etc.

lrtest(gam_linear, gam_nonlinear)
```
The model with a nonlinear exposure term is significantly better than the model with a linear exposure term (using a likelihood ratio test). (This result also holds if you use AIC for model selection, but there is no significant difference using BIC.)

Now fitting on data from all current languages
```{r}
data_plotting <- bilingual_data_prop |> 
  select(prop_prod, age, exposure_proportion, 
         child_id, language)

gam_nonlinear_all <- gamlss(prop_prod ~ pbm(age, lambda = 10000) * 
                              pbm(exposure_proportion, lambda = 10000) +
                              re(random = ~ 1 | child_id, level = 0) +
                              re(random = ~ 1 | language, level = 0),
                            sigma.formula = ~ pbm(age, lambda = 10000) * 
                              pbm(exposure_proportion, lambda = 10000),
                            data = data_plotting,
                            family = BE,
                            control = gamlss.control(n.cyc = 100))
gam_linear_all <- gamlss(prop_prod ~ pbm(age, lambda = 10000) * 
                           exposure_proportion +
                           re(random = ~ 1 | child_id, level = 0) +
                           re(random = ~ 1 | language, level = 0),
                         sigma.formula = ~ pbm(age, lambda = 10000) * 
                           exposure_proportion,
                         data = data_plotting,
                         family = BE,
                         control = gamlss.control(n.cyc = 100))

lrtest(gam_linear_all, gam_nonlinear_all)
```


